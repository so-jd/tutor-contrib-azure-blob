{% if RUN_AZURE_STORAGE %}
# Install Azure storage dependencies
RUN pip install azure-storage-blob==12.19.0

# Create Azure storage backend directly
RUN cat > /openedx/edx-platform/azure_storage_backend.py << 'EOF'
"""
Custom Azure Blob Storage backend for django-storages
Integrates Azure Blob Storage with OpenedX
"""

import os
import mimetypes
from datetime import datetime, timedelta
from urllib.parse import urljoin

from django.conf import settings
from django.core.files.base import ContentFile
from django.core.files.storage import Storage
from django.utils.deconstruct import deconstructible

try:
    from azure.storage.blob import BlobServiceClient, ContentSettings
    from azure.core.exceptions import ResourceNotFoundError
except ImportError:
    raise ImportError("azure-storage-blob is required. Install with: pip install azure-storage-blob")


@deconstructible
class AzureBlobStorage(Storage):
    """
    Azure Blob Storage backend for Django
    """
    
    def __init__(self, **settings_dict):
        # Azure connection settings
        self.account_name = self._get_setting('AZURE_ACCOUNT_NAME', settings_dict)
        self.account_key = self._get_setting('AZURE_ACCOUNT_KEY', settings_dict)
        self.container_name = self._get_setting('AZURE_CONTAINER_NAME', settings_dict)
        self.custom_domain = self._get_setting('AZURE_CUSTOM_DOMAIN', settings_dict)
        
        # Optional settings
        self.connection_string = self._get_setting('AZURE_CONNECTION_STRING', settings_dict)
        self.token_credential = self._get_setting('AZURE_TOKEN_CREDENTIAL', settings_dict)
        
        # Initialize blob service client
        if self.connection_string:
            self.blob_service_client = BlobServiceClient.from_connection_string(
                conn_str=self.connection_string
            )
        elif self.token_credential:
            account_url = f"https://{self.account_name}.blob.core.windows.net"
            self.blob_service_client = BlobServiceClient(
                account_url=account_url, 
                credential=self.token_credential
            )
        else:
            account_url = f"https://{self.account_name}.blob.core.windows.net"
            self.blob_service_client = BlobServiceClient(
                account_url=account_url, 
                credential=self.account_key
            )
        
        # Get container client
        self.container_client = self.blob_service_client.get_container_client(
            container=self.container_name
        )
        
        # Create container if it doesn't exist
        try:
            self.container_client.create_container()
        except Exception:
            pass  # Container already exists or no permissions
    
    def _get_setting(self, name, settings_dict):
        """Get setting from settings_dict or Django settings"""
        return settings_dict.get(name, getattr(settings, name, None))
    
    def _open(self, name, mode='rb'):
        """Open file from Azure Blob Storage"""
        try:
            blob_client = self.container_client.get_blob_client(blob=name)
            blob_data = blob_client.download_blob().readall()
            return ContentFile(blob_data)
        except ResourceNotFoundError:
            raise FileNotFoundError(f"File {name} not found in Azure Blob Storage")
    
    def _save(self, name, content):
        """Save file to Azure Blob Storage"""
        blob_client = self.container_client.get_blob_client(blob=name)
        
        # Determine content type
        content_type, _ = mimetypes.guess_type(name)
        content_settings = None
        if content_type:
            content_settings = ContentSettings(content_type=content_type)
        
        # Upload blob
        blob_client.upload_blob(
            data=content,
            overwrite=True,
            content_settings=content_settings
        )
        
        return name
    
    def delete(self, name):
        """Delete file from Azure Blob Storage"""
        try:
            blob_client = self.container_client.get_blob_client(blob=name)
            blob_client.delete_blob()
        except ResourceNotFoundError:
            pass  # File doesn't exist, that's fine
    
    def exists(self, name):
        """Check if file exists in Azure Blob Storage"""
        try:
            blob_client = self.container_client.get_blob_client(blob=name)
            blob_client.get_blob_properties()
            return True
        except ResourceNotFoundError:
            return False
    
    def listdir(self, path):
        """List directory contents"""
        if path and not path.endswith('/'):
            path += '/'
        
        dirs = set()
        files = []
        
        blob_list = self.container_client.list_blobs(name_starts_with=path)
        
        for blob in blob_list:
            name = blob.name
            if path:
                name = name[len(path):]
            
            if '/' in name:
                # This is in a subdirectory
                dir_name = name.split('/')[0]
                dirs.add(dir_name)
            else:
                # This is a file in the current directory
                files.append(name)
        
        return list(dirs), files
    
    def size(self, name):
        """Get file size"""
        try:
            blob_client = self.container_client.get_blob_client(blob=name)
            properties = blob_client.get_blob_properties()
            return properties.size
        except ResourceNotFoundError:
            raise FileNotFoundError(f"File {name} not found in Azure Blob Storage")
    
    def url(self, name):
        """Get URL for file"""
        if self.custom_domain:
            return urljoin(self.custom_domain, name)
        else:
            return f"https://{self.account_name}.blob.core.windows.net/{self.container_name}/{name}"
    
    def get_accessed_time(self, name):
        """Get file accessed time"""
        return self.get_modified_time(name)
    
    def get_created_time(self, name):
        """Get file created time"""
        return self.get_modified_time(name)
    
    def get_modified_time(self, name):
        """Get file modified time"""
        try:
            blob_client = self.container_client.get_blob_client(blob=name)
            properties = blob_client.get_blob_properties()
            return properties.last_modified
        except ResourceNotFoundError:
            raise FileNotFoundError(f"File {name} not found in Azure Blob Storage")
    
    def generate_signed_url(self, name, expiration=3600):
        """Generate a signed URL for private blob access"""
        from azure.storage.blob import generate_blob_sas, BlobSasPermissions
        
        sas_token = generate_blob_sas(
            account_name=self.account_name,
            container_name=self.container_name,
            blob_name=name,
            account_key=self.account_key,
            permission=BlobSasPermissions(read=True),
            expiry=datetime.utcnow() + timedelta(seconds=expiration)
        )
        
        return f"{self.url(name)}?{sas_token}"
EOF
{% endif %}